#!/bin/bash

EMERGE_CONF=${EMERGE_CONF:-/etc/emerge}

TMPDIR='/tmp'
PACMAN='pacman'
SUDO='sudo'
if [ -e "$EMERGE_CONF/emerge.conf" ]; then
	. "$EMERGE_CONF/emerge.conf"
fi
SUDO_HELPER_PREFIX="$TMPDIR/$( basename "$0" ).$$"
SUDO_HELPER_PID=""

list_doesnot_contain() {
	local target="$1"
	shift
	while [ -n "$1" ]; do
		[ "$target" = "$1" ] && return 1
		shift
	done
	return 0
}

filter_conf() {
	local line
	while read line; do
		if [ -n "$(echo $line|grep '^<')" ]; then
			import_set $(echo $line|sed 's/^<//')
		elif [ -n "$(echo $line|grep '^@')" ]; then
			$PACMAN -Sqg $(echo $line|sed 's/^@//')
		else
			echo $line
		fi
	done
}

filter_exclude_depended() {
	xargs -r $PACMAN -Qi | awk '/^Name/{name=$3} /^Required By\s*:\s*\S/{ if ( $4 == "None" ) { print name } }'
}

filter_exclude_optdepended() {
	xargs -r $PACMAN -Qi | awk '/^Name/{name=$3} /^Optional For\s*:\s*\S/{ if ( $4 == "None" ) { print name } }'
}

filter_only_explicit() {
	xargs -r $PACMAN -Qi | awk '/^Name/{name=$3} /^Install Reason.*Explicitly installed$/{ print name }'
}

filter_conf_minimize_groups() {
	local line
	while read line; do
		if [ -n "$(echo $line|grep '^<')" ]; then
			import_set $(echo $line|sed 's/^<//')
		elif [ -n "$(echo $line|grep '^@')" ]; then
			$PACMAN -Sqg $(echo $line|sed 's/^@//') | filter_exclude_depended
		else
			echo $line
		fi
	done
}

import_set() {
	local includecmd="$EMERGE_CONF/$1.set"
	local maskcmd="$EMERGE_CONF/$1.mask"

	if [ ! -e "$maskcmd" ]; then
		maskcmd="$( which true )"
	fi

	[ -x "$includecmd" ] || includecmd="cat $includecmd"
	[ -x "$maskcmd" ] || maskcmd="cat $maskcmd"

	local include=$($includecmd|filter_conf_minimize_groups)
	local mask=$($maskcmd|filter_conf)
	for pkg in $include; do
		if list_doesnot_contain $pkg $mask ; then
			echo $pkg
		fi
	done
}

extras() {
	local line
	while read line; do
		for pkg in $line; do
			list_doesnot_contain $pkg $@ && echo $pkg
		done
	done
}

emerge_preview() {
	# show output similar to emerge preview
	# $1 - ADDS - packages to add due to world.set changes
	# $2 - DELS - packages to remove due to world.set changes
	local ADDS="$1"
	local DELS="$2"
	local PKG
	echo "These are the packages that would be merged:"
	for PKG in $ADDS; do
		if $PACMAN -T "$PKG" >/dev/null ; then
			echo "[emerge  R     ] $PKG"
		else
			echo "[emerge  N     ] $PKG"
		fi
	done
	for PKG in $DELS; do
		if $PACMAN -T "$PKG" >/dev/null ; then
			echo "[emerge Remove ] $PKG"
		else
			echo "[emerge Removed] $PKG"
		fi
	done
	if [ $ASK == 1 ]; then
		local REPLY="*"
		while [[ ! $REPLY =~ ^[YNyn]?$ ]]; do
			echo -n "Continue [Y/n]? "
			read REPLY
		done
		if [ "$REPLY" == "" ]; then
			REPLY="Y"
		elif [[ $REPLY =~ ^[yn]$ ]]; then
			REPLY=$( tr 'yn' 'YN' <<<"$REPLY" )
		fi
		if [ "$REPLY" != "Y" ]; then
			exit 0
		fi
	fi
}

pacsync_update_world() {
	explicit=$(import_set world)

	explicit_rm=$($PACMAN -Qqe|extras $explicit)
	explicit_add=$(echo $explicit|extras $($PACMAN -Qqe))

	emerge_preview "$explicit_add" "$explicit_rm"

	toinstall=""
	[ -z "$explicit_rm" ] || $PACMAN -D --asdeps $explicit_rm || exit 1
	if [ -n "$explicit_add" ]; then
		for pkg in $explicit_add; do
			if $PACMAN -Q "$pkg" > /dev/null 2>&1; then
				$PACMAN -D --asexplicit $pkg
			else
				toinstall="$toinstall $pkg"
			fi
		done
	fi
	if [ -n "$toinstall" ]; then
		$PACMAN -Su$PACMAN_S_OPTS $toinstall || exit 1
	else
		$PACMAN -Su$PACMAN_S_OPTS
	fi
	orphans=$( $PACMAN -Qqtd | filter_exclude_optdepended )
	[ -z "$orphans" ] || $PACMAN -Rs$PACMAN_R_OPTS $orphans || exit 1
}

rebuild_world_set() {
	local SETFILE="$EMERGE_CONF/world.set"
	ensure_world_set_is_writable || exit $?
	if [ "$SUDO_HELPER_PID" != "" ]; then
		manipulate_world_set "$0" --rebuild-world-set
		return $?
	fi
	if [ -e "$SETFILE" ]; then
		local SUFFIX=".backup-"
		local DATE=$(date +%Y-%m-%d)
		local TIME="_$(date +%H%M)"
		local SEC="$(date +%S)"
		local TFN=""
		# determine backup filename
		if [ ! -e "$SETFILE$SUFFIX$DATE" ]; then
			TFN="$SETFILE$SUFFIX$DATE"
		elif [ ! -e "$SETFILE$SUFFIX$DATE$TIME" ]; then
			TFN="$SETFILE$SUFFIX$DATE$TIME"
		elif [ ! -e "$SETFILE$SUFFIX$DATE$TIME$SEC" ]; then
			TFN="$SETFILE$SUFFIX$DATE$TIME$SEC"
		else
			local PREFIX="${SETFILE}${SUFFIX}${DATE}${TIME}${SEC}_"
			TFN="$PREFIX$SECONDS$RANDOM"
			while [ ! -e "$TFN" ]; do
				TFN="$PREFIX$SECONDS$RANDOM"
			done
		fi
		echo ">>> backing up existing world.set file as $TFN"
		mv "$SETFILE" "$TFN" || exit $?
	fi
	echo ">>> generating world.set from current system pacman config..."
	$PACMAN -Qqe > "$SETFILE.raw"
	# optimize world.set
	local PKG
	local PGROUPS
	local REQDBY
	local GROUP
	local PARENTS
	local PARENT
	local CHILDREN
	local LINE
	echo ">>> checking for dependencies..."
	[ -f "$SETFILE.checkdeps" ] && rm "$SETFILE.checkdeps"
	[ -f "$SETFILE.checkdeps.groups" ] && rm "$SETFILE.checkdeps.groups"
	local PKGIDX=0
	local RAWLINES=$( wc -l < "$SETFILE.raw" )
	for PKG in $( cat "$SETFILE.raw" ) ; do
		$PACMAN -Qi "$PKG" > /tmp/emerge_pacman_Qi
		PGROUPS=$( grep -E '^Groups *: ' < /tmp/emerge_pacman_Qi | cut -d: -f2 | sed -r 's/^ +//g ; s/ +$//g' )
		REQDBY=$( grep -E '^Required By *: ' < /tmp/emerge_pacman_Qi | cut -d: -f2 | sed -r 's/^ +//g ; s/ +$//g' )
		# determine parents
		PARENTS=""
		if [ "$PGROUPS" != "None" ]; then
			for GROUP in $PGROUPS ; do
				PARENTS="$PARENTS @$GROUP"
			done
		fi
		if [ "$REQDBY" != "None" ]; then
			for GROUP in $REQDBY ; do
				PARENTS="$PARENTS $GROUP"
			done
		fi
		if [ -n "$PARENTS" ]; then
			printf "%-20s:%s\n" "$PKG" "$PARENTS" >> "$SETFILE.checkdeps"
			for GROUP in $PARENTS ; do
				if [[ $GROUP =~ ^@ ]]; then
					GROUP=${GROUP#@}
					echo "$GROUP" >> "$SETFILE.checkdeps.groups"
				fi
			done
		fi
		if [ -t 0 ]; then
			(( ++PKGIDX ))
			printf "Package %i/%i...\r" $PKGIDX $RAWLINES
		fi
	done
	[ -f /tmp/emerge_pacman_Qi ] && rm /tmp/emerge_pacman_Qi
	# uniqify group list
	sort -u "$SETFILE.checkdeps.groups" > "$SETFILE.checkdeps.groups.tmp" && mv "$SETFILE.checkdeps.groups.tmp" "$SETFILE.checkdeps.groups"
	# change dependency of packages that would be included anyhow
	echo ">>> simplify package list with deep dependency checks..."
	while read LINE ; do
		LINE=$( sed -r 's/^(\S+) +: +/\1\t/g ; s/@\S+( +|$)//g' <<<"$LINE" )
		read PKG PGROUPS <<<"$LINE"
		if ! grep -Fxq "$PKG" "$SETFILE.raw" ; then
			true
		elif [ -n "$PGROUPS" ]; then
			echo -n "$PKG is explicit in set"
			REQDBY=""
			for PARENT in $PGROUPS ; do
				if $PACMAN -T "$PARENT" >/dev/null ; then
					REQDBY="$REQDBY $PARENT"
				fi
			done
			if [ -n "$REQDBY" ]; then
				echo ", but gets pulled in by:$REQDBY"
				grep -Fxv "$PKG" "$SETFILE.raw" > "$SETFILE.tmp" && mv "$SETFILE.tmp" "$SETFILE.raw"
				echo "$PKG" >> "$SETFILE.was_explicit"
			else
				echo -en "\r                                        \r"
			fi
		fi
	done < "$SETFILE.checkdeps"
	if [ -s "$SETFILE.was_explicit" ]; then
		echo ">>> marking explicit packages as deps when also included..."
		if [ "$UID" == 0 -o "$EUID" == 0 ]; then
			$PACMAN -D --asdeps $( cat "$SETFILE.was_explicit" )
			rm "$SETFILE.was_explicit"
		else
			echo "**********************************************" >&2
			echo "*** current user is not root" >&2
			echo "*** unable to mark explicit packages: $( cat "$SETFILE.was_explicit" )" >&2
			echo "*** explicit package list is preserved at: $SETFILE.was_explicit" >&2
			echo "*** run the following as root: $PACMAN -D --asdeps \$( cat \"$SETFILE.was_explicit\" )" >&2
			echo "**********************************************" >&2
		fi
	fi
	# replace group children with @group
	echo ">>> checking for dependencies in groups..."
	for GROUP in $( cat "$SETFILE.checkdeps.groups" ) ; do
		CHILDREN=$( $PACMAN -Sg "$GROUP" | sed "s/^$GROUP //g" )
		if [ -n "$CHILDREN" ] && $PACMAN -T $CHILDREN >/dev/null ; then
			# only replace if at least 1 child is explicitly installed
			local EXPLICIT_CHILDREN=$( filter_only_explicit <<<"$CHILDREN" )
			if [ -z "$EXPLICIT_CHILDREN" ]; then
				continue
			fi
			echo -n "replacing @$GROUP children in world.set: "
			for PKG in $CHILDREN ; do
				echo -n "$PKG "
				grep -Fxv "$PKG" "$SETFILE.raw" > "$SETFILE.tmp" && mv "$SETFILE.tmp" "$SETFILE.raw"
			done
			echo "@$GROUP" >> "$SETFILE.raw"
			echo ""
		fi
	done
	echo ">>> sorting packages..."
	sort -u "$SETFILE.raw" > "$SETFILE.raw.tmp" && mv "$SETFILE.raw.tmp" "$SETFILE.raw"
	echo ">>> moving temporary file to $SETFILE"
	mv "$SETFILE.raw" "$SETFILE"
	echo ">>> cleaning up..."
	[ -f "$SETFILE.checkdeps" ] && rm "$SETFILE.checkdeps"
	[ -f "$SETFILE.checkdeps.groups" ] && rm "$SETFILE.checkdeps.groups"
}

ensure_world_set_exists() {
	if [ ! -e "$EMERGE_CONF/world.set" ]; then
		echo ">>> world set file '$EMERGE_CONF/world.set' does not exist."
		rebuild_world_set
		return $?
	fi
}

sudo_process() {
	if [ $SPAWN_SUDO_PROCESS -le 1 -o ! -e "/proc/$SPAWN_SUDO_PROCESS/" ]; then
		echo "sudo_process: invalid pid: $SPAWN_SUDO_PROCESS" >&2
		return 1
	fi
	export SUDO_HELPER_PREFIX="$TMPDIR/$( basename "$0" ).$SPAWN_SUDO_PROCESS"
	local CMDIN="$SUDO_HELPER_PREFIX/in"
	local CMDOUT="$SUDO_HELPER_PREFIX/out"
	if [ ! -r "$CMDIN" ]; then
		echo "sudo_process: unable to read: $CMDIN" >&2
		return 1
	fi
	if [ ! -w "$CMDOUT" ]; then
		echo "sudo_process: unable to write: $CMDOUT" >&2
		return 1
	fi
	#echo "sudo_process: attempting to remap stdin/out..." >&2
	exec 0< "$CMDIN" || echo "sudo_process: stdin mapping failed: $?" >&2
	exec 1> "$CMDOUT" || echo "sudo_process: stdout mapping failed: $?" >&2
	read -rt 3 LINE || return $?
	#echo "sudo_process: PPID LINE: $LINE" >&2
	if [ "$LINE" != "$SPAWN_SUDO_PROCESS" ]; then
		echo "sudo_process: FATAL: header mismatch: $LINE != $SPAWN_SUDO_PROCESS" >&2
		return 1
	fi
	echo "$$"
	read -r LINE
	while [ -n "$LINE" -o -e "/proc/$SPAWN_SUDO_PROCESS/" ] ; do
		#echo "sudo_process: LINE: $LINE" >&2
		BOUNDARY="### $SPAWN_SUDO_PROCESS $$ $RANDOM$RANDOM$RANDOM ###"
		case "$LINE" in
			exit) break ;;
			*)
				echo "$BOUNDARY"
				sh -c "$LINE"
				local RET=$?
				echo "$BOUNDARY"
				echo "$RET"
				;;
		esac
		read -r LINE
	done
}

spawn_sudo_process() {
	if [ -e "$SUDO_HELPER_PREFIX" ]; then
		echo ">>> FATAL: unable to spawn sudo process: already exists" >&2
		return 1
	elif ! mkdir "$SUDO_HELPER_PREFIX" ; then
		echo ">>> FATAL: unable to spawn sudo process: unable to lock" >&2
		return 1
	fi
	local CMDIN="$SUDO_HELPER_PREFIX/in"
	local CMDOUT="$SUDO_HELPER_PREFIX/out"
	mknod "$CMDIN" p && mknod "$CMDOUT" p
	local RET=$?
	if [ $RET -ne 0 ]; then
		echo ">>> FATAL: unable to spawn sudo process: unable to create named pipes" >&2
		return 1
	fi
	# spawn sudo process
	$SUDO $0 --spawn-sudo-process $$ || return $?
	# initialization
	exec 3> "$CMDIN" || echo "spawn_sudo_process: CMDIN mapping failed: $?" >&2
	exec 4< "$CMDOUT" || echo "spawn_sudo_process: CMDOUT mapping failed: $?" >&2
	echo "$$" >&3
	read -ru 4 SUDO_HELPER_PID
	rm "$CMDIN" "$CMDOUT"
	if [[ $SUDO_HELPER_PID =~ ^[0-9]+$ ]] ; then
		export SUDO_HELPER_PID=$SUDO_HELPER_PID
	else
		echo "spawn_sudo_process: invalid pid: $SUDO_HELPER_PID" >&2
		echo "exit" >&3
		return 1
	fi
	local SUDO_UID=$( manipulate_world_set id -u | tr -d "\n" )
	#echo "SUDO_UID=$SUDO_UID" >&2
	if [ "$SUDO_UID" != "0" ]; then
		echo "spawn_sudo_process: invalid resulting uid: $SUDO_UID" >&2
		return 1
	fi
	# return 0 for success
	return 0
}

ensure_world_set_is_writable() {
	# first be sure dir exists
	if [ ! -d "$EMERGE_CONF/" ]; then
		echo ">>> missing configuration directory: $EMERGE_CONF"
		return 1
	fi
	local NEED_SUDO=0
	#local STATUS="DIR_EXISTS"
	if [ ! -w "$EMERGE_CONF/" ]; then
		#STATUS="$STATUS, DIR_NOT_WRITABLE"
		NEED_SUDO=1
	elif [ -e "$EMERGE_CONF/world.set" ]; then
		#STATUS="$STATUS, DIR_WRITABLE, FILE_EXISTS"
		if [ ! -w "$EMERGE_CONF/world.set" ]; then
			#STATUS="$STATUS, FILE_NOT_WRITABLE"
			NEED_SUDO=1
		fi
	fi
	#echo ">>> world.set status: $STATUS"
	if [ "$NEED_SUDO" == "0" ] ; then
		return 0
	fi
	if [ "$SUDO_HELPER_PID" == "" ]; then
		spawn_sudo_process || return $?
		echo ">>> spawned new sudo process: $SUDO_HELPER_PID"
	fi
	if [ "$SUDO_HELPER_PID" != "" ]; then
		echo ">>> using spawned sudo process: $SUDO_HELPER_PID"
		return 0
	fi
	if [ ! -w "$EMERGE_CONF/world.set" ]; then
		echo ">>> world set file '$EMERGE_CONF/world.set' is not writable"
		return 1
	fi
	echo ">>> unable to ensure world set file '$EMERGE_CONF/world.set' is writable: unknown error"
	return 1
}

manipulate_world_set() {
	#echo "manipulate_world_set(): starting..." >&2
	if [ -w "$EMERGE_CONF/" -o -w "$EMERGE_CONF/world.set" ]; then
		# execute locally
		echo "manipulate_world_set(): executing: $*" >&2
		sh -c "$*"
		return $?
	fi
	if [ "$SUDO_HELPER_PID" == "" ]; then
		ensure_world_set_is_writable
		local RET=$?
		if [ $RET != 0 ]; then
			echo "manipulate_world_set(): ensure_world_set_is_writable() returned $RET" >&2
			return $RET
		fi
	fi
	# send the command
	#echo "manipulate_world_set(): sending: $*" >&2
	echo "$*" >&3
	# receive output
	local BOUNDARY=""
	read -ru 4 BOUNDARY
	local BOUNDARY_OK=0
	if [[ $BOUNDARY =~ ^###\ ([0-9]+)\ ([0-9]+)\ [0-9]+\ ###$ ]]; then
		if [ "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}" == "$$ $SUDO_HELPER_PID" ]; then
			BOUNDARY_OK=1
		fi
	fi
	if [ "$BOUNDARY_OK" != "1" ]; then
		echo "manipulate_world_set(): invalid boundary: $BOUNDARY" >&2
		echo "exit" >&3
		return 1
	fi
	local LINE=""
	read -ru 4 LINE
	while [ "$LINE" != "$BOUNDARY" ]; do
		#echo "manipulate_world_set(): GOT LINE=$LINE" >&2
		echo "$LINE"
		read -ru 4 LINE
	done
	# receive error code
	read -ru 4 LINE
	local RET=1
	if [[ $LINE =~ ^[0-9]+$ ]]; then
		RET=$LINE
	fi
	#echo "manipulate_world_set(): ending with CODE: $RET" >&2
	return $RET
}

pacman_install() {
	echo ">>> Mode: install $PKGS"
	ensure_world_set_exists || exit $?
	emerge_preview "$PKGS" ""
	ensure_world_set_is_writable || exit $?
	$PACMAN -S$PACMAN_S_OPTS $PKGS
	local RET=$?
	if [ $RET != 0 ]; then
		echo ">>> failed to install: $PKGS"
	elif [ "$ONESHOT" == "0" -a "$PRETEND" == "0" ]; then
		local PKG
		local CLEANUP=0
		for PKG in $PKGS ; do
			if $PACMAN -T "$PKG" >/dev/null ; then
				echo ">>> adding to world.set: $PKG"
				manipulate_world_set "echo \"$PKG\" >> \"$EMERGE_CONF/world.set\""
				CLEANUP=1
			else
				echo ">>> failed to install: $PKG"
			fi
		done
		if [ $CLEANUP == 1 ]; then
			manipulate_world_set "sort -u \"$EMERGE_CONF/world.set\" > \"$EMERGE_CONF/world.set.tmp\" && mv \"$EMERGE_CONF/world.set.tmp\" \"$EMERGE_CONF/world.set\""
			RET=$?
		fi
	fi
	exit $RET
}

pacman_depclean() {
	echo ">>> Mode: depclean $PKGS"
	ensure_world_set_exists || exit $?
	emerge_preview "" "$PKGS"
	ensure_world_set_is_writable || exit $?
	$PACMAN -Rs$PACMAN_R_OPTS $PKGS
	local RET=$?
	if [ $RET != 0 ]; then
		echo ">>> failed to depclean: $PKGS"
	elif [ "$ONESHOT" == "0" -a "$PRETEND" == "0" ]; then
		local PKG
		for PKG in $PKGS ; do
			if $PACMAN -T "$PKG" >/dev/null ; then
				echo ">>> failed to depclean: $PKG"
			else
				echo ">>> removing from world.set: $PKG"
				manipulate_world_set "grep -Fxv \"$PKG\" \"$EMERGE_CONF/world.set\" > \"$EMERGE_CONF/world.set.tmp\" && mv \"$EMERGE_CONF/world.set.tmp\" \"$EMERGE_CONF/world.set\""
			fi
		done
	fi
	exit $RET
}

pacman_update_world() {
	echo ">>> Mode: update @world"
	ensure_world_set_exists || exit $?
	pacsync_update_world
}

pacman_depclean_world() {
	echo ">>> Mode: depclean @world"
	ensure_world_set_exists || exit $?
	pacsync_update_world
}

show_help() {
	cat <<<"
usage: $( basename "$0" ) {-h|--help}
       $( basename "$0" ) {--rebuild-world-set|--sync}
       $( basename "$0" ) {-s|--search|-S|--searchdesc} SEARCH_TERM
       $( basename "$0" ) [options] {world|@world}
       $( basename "$0" ) [options] [package1...]
standalone options:
       -h --help             show this help text
       --rebuild-world-set   generate new world.set from pacman database
       --sync                fetch latest package database updates
       -s --search -S --searchdesc  SEARCH_TERM
					searches package database names and info for search_terms
       --spawn-sudo-process  interally used to spawn a process for
					modifying the configuration file
general options:
       -1 --oneshot     install packages as non-explicit
       -a --ask         ask for user confirmation before proceeding
       -c --depclean    remove specified packages (or those not in world)
       -f --fetchonly   only download package files, don't install
       -p --pretend     only show what would be done
       -u --update      update specified packages (or world if none)
       -O --nodeps      skip package dependency checking during install
       -e --emptytree   nothing; accepted for compatibility
       -N --newuse      nothing; accepted for compatibility
       -D --deep        nothing; accepted for compatibility
       -v --verbose     nothing; accepted for compatibility
"
}

parseArgs() {
	# argument parsing for common emerge flags
	while [[ $# -gt 0 ]]; do
		ARG="$1"
		NEXTARG=""
		shift
		while [ -n "$ARG" ]; do
			case "$ARG" in
				# our own additions
				-h|--help) HELP=1 ;;
				--rebuild-world-set) REBUILD_WORLD_SET=1 ;;
				--spawn-sudo-process)
					if [[ $1 =~ ^[0-9]+$ ]] ; then
						SPAWN_SUDO_PROCESS="$1"
						shift
					fi
					;;
				# emerge compatibility flags
				--sync) SYNC=1 ;;
				-s|--search|-S|--searchdesc) SEARCH=1 ;;
				-1|--oneshot) ONESHOT=1 ;;
				-a|--ask)
					if [[ $1 =~ ^[YNyn]$ ]] ; then
						if [[ "$1" =~ ^[Yy]$ ]]; then
							ASK=1
						else
							ASK=0
						fi
						shift
					else
						ASK=1
					fi
					;;
				-c|--depclean) DEPCLEAN=1 ;;
				-f|--fetchonly) FETCHONLY=1 ;;
				-p|--pretend) PRETEND=1 ;;
				-u|--update) UPDATE=1 ;;
				-O|--nodeps) NODEPS=1 ;;
				# ignored arguments
				-e|--emptytree) true ;;
				-N|--newuse) true ;;
				-D|--deep)
					if [[ $1 =~ ^[0-9]+$ ]] ; then
						shift
					fi
					;;
				-v|--verbose)
					if [[ $1 =~ ^[YNyn]$ ]] ; then
						shift
					fi
					;;
				world|@world) true ;;
				# unknown commands
				-*)
					if [[ $ARG =~ ^-[0-9A-Za-z][0-9A-Za-z] ]]; then
						if [ -z "$NEXTARG" ]; then
							NEXTARG="-${ARG:2}"
							ARG="${ARG:0:2}"
						else
							NEXTARG="-${ARG:2} $NEXTARG"
							ARG="${ARG:0:2}"
						fi
						continue
					else
						HELP=1
						echo "error: invalid argument: $ARG" >&2
					fi
					;;
				*)
					if [[ $ARG =~ ^[A-Za-z] ]]; then
						if [ -n "$PKGS" ]; then
							PKGS="$PKGS "
						fi
						PKGS="$PKGS$ARG"
					else
						HELP=1
						echo "error: invalid argument: $ARG" >&2
					fi
					;;
			esac
			ARG="$NEXTARG"
			NEXTARG=""
		done
	done
}

# defaults for common emerge flags
SPAWN_SUDO_PROCESS=0
REBUILD_WORLD_SET=0
SYNC=0
SEARCH=0
PKGS=""
ONESHOT=0
ASK=0
DEPCLEAN=0
FETCHONLY=0
PRETEND=0
UPDATE=0
NODEPS=0
HELP=0
if [ "$EMERGE_DEFAULT_OPTS" != "" ]; then
	parseArgs $EMERGE_DEFAULT_OPTS
fi
parseArgs $@

# map emerge flags to pacman flags
PACMAN_S_OPTS=""
PACMAN_R_OPTS=""
if [ $SYNC == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS}y"
fi

if [ $FETCHONLY == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS}w"
fi

if [ $NODEPS == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS}dd"
fi

if [ $UPDATE == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS}u"
fi

if [ $PRETEND == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS}p"
	PACMAN_R_OPTS="${PACMAN_R_OPTS}p"
fi

if [ $ASK == 0 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS} --noconfirm"
	PACMAN_R_OPTS="${PACMAN_R_OPTS} --noconfirm"
else
	PACMAN_S_OPTS="${PACMAN_S_OPTS} --confirm"
	PACMAN_R_OPTS="${PACMAN_R_OPTS} --confirm"
fi

if [ $ONESHOT == 1 ] ; then
	PACMAN_S_OPTS="${PACMAN_S_OPTS} --asdeps"
fi

# determine operating mode:
if [ "$HELP" != "0" ]; then
	show_help
	exit 1
elif [ $SPAWN_SUDO_PROCESS != 0 ]; then
	sudo_process &
elif [ $SEARCH != 0 -a -n "$PKGS" ]; then
	echo ">>> search mode: $PKGS"
	$PACMAN -Ss $PKGS
elif [ $REBUILD_WORLD_SET == 1 ]; then
	rebuild_world_set
elif [ $DEPCLEAN == 1 ]; then
	if [ -n "$PKGS" ]; then
		pacman_depclean
	else
		pacman_depclean_world
	fi
elif [ $UPDATE == 1 ]; then
	if [ -n "$PKGS" ]; then
		pacman_install
	else
		pacman_update_world
	fi
elif [ -n "$PKGS" ]; then
	pacman_install
elif [ $SYNC == 1 ] ; then
	echo ">>> sync-database-only mode..."
	$PACMAN -Syy
else
	show_help
	exit 1
fi
